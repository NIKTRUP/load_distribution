#define NDEBUG

#include "include/test_framework.h"
#include "include/functions.h"
#include "include/string_load_distribution.h"
#include "include/log_duration.h"
#include "include/tests.h"
#include <algorithm>
#include <functional>

using namespace std;


// Записывает содержимое контейнера в csv файл
void Write(const membrane_dstrb::Coordinates<ldouble> p, const std::vector<std::vector<ldouble>>& u, const std::string& name){
    using namespace std::literals;
    std::ofstream out(name + ".csv"s);
    if(out.is_open()){
        for(size_t i = 0 ; i < p.y.size(); ++i){
            for(size_t j = 0 ; j < p.x.size(); ++j){
                out << p.x[j] << ',' << p.y[i]<< ',' << u[i][j] << '\n';
            }
        }
    }
    out.close();
}

struct QualityIndicators{
    ldouble alpha,
    loss,
    difference;
};


struct SolutionData {
    std::vector<ldouble> p, u;
    ldouble loss;
};

SolutionData SolveTask(size_t size, const std::vector<ldouble>& x, const std::vector<ldouble>& u0,
                       ldouble T0, ldouble alpha, ldouble P, ldouble begin, ldouble end){
    std::vector<std::vector<ldouble>> matrix(size + 1, std::vector<ldouble>(size+1));
    std::vector<ldouble> b(matrix.size());
    str_dstrb::FillSLAE(matrix, b, x, u0, alpha, P, T0, begin ,end);
    SolveGauss(matrix, b);
    std::vector<ldouble> u(size);
    auto p = std::vector<ldouble>{b.begin(), b.end() - 1};
    // Calculate U
    for (size_t i = 0; i < u.size(); ++i) {
        u[i] = str_dstrb::СalculateDeviationFromEquilibrium(x[i], {x, p}, T0, begin, end);
    }
    ldouble loss = std::abs(str_dstrb::CalculateLoss(x, u , u0));
    return {p, u, loss};
}

std::vector<QualityIndicators> MakeExperimental(size_t size, const std::vector<ldouble>& x, const std::vector<ldouble>& u0,
                                  ldouble T0, size_t size_alpha, ldouble alpha_end, ldouble P, ldouble begin, ldouble end){
    ldouble h = alpha_end/(size_alpha-1);
    std::vector<QualityIndicators> out;
    out.reserve(alpha_end/h);

    auto [p_alpha0, u_alpha0, loss_alpha0] = SolveTask(size, x, u0, T0, 0.0, P, begin, end);
    for(ldouble alpha_ = 0; alpha_ <= alpha_end ; alpha_ += h){
        auto [p, u, loss] = SolveTask(size, x, u0, T0, alpha_, P, begin, end);
        ldouble metric = MAE(p.begin(), p.end(), p_alpha0.begin(), p_alpha0.end());
        out.push_back({alpha_, loss, metric});
    }
    return out;
}

void StringDistributionExample(std::function<ldouble(ldouble)> u0_function = nullptr, size_t size = 1001, ldouble begin = 0, ldouble end = 1, ldouble T0= 5, ldouble P= 1,
                               ldouble alpha = 0.0){
    // Init Data
    // когда отношение P/T0 = 2, то отлично сходится
    if(u0_function == nullptr){
        u0_function = [end](ldouble x){ return (x*(end-x))/10.0; };
    }
    std::vector<ldouble> x = //{0.001,0.002,0.003,0.004,0.005,0.006,0.007,0.008,0.009,0.01,0.011,0.012,0.013,0.014,0.015,0.016,0.017,0.018,0.019,0.02,0.021,0.022,0.023,0.024,0.025,0.026,0.027,0.028,0.029,0.03,0.031,0.032,0.033,0.034,0.035,0.036,0.037,0.038,0.039,0.04,0.041,0.042,0.043,0.044,0.045,0.046,0.047,0.048,0.049,0.05,0.051,0.052,0.053,0.054,0.055,0.056,0.057,0.058,0.059,0.06,0.061,0.062,0.063,0.064,0.065,0.066,0.067,0.068,0.069,0.07,0.071,0.072,0.073,0.074,0.075,0.076,0.077,0.078,0.079,0.08,0.081,0.082,0.083,0.084,0.085,0.086,0.087,0.088,0.089,0.09,0.091,0.092,0.093,0.094,0.095,0.096,0.097,0.098,0.099,0.1,0.101,0.102,0.103,0.104,0.105,0.106,0.107,0.108,0.109,0.11,0.111,0.112,0.113,0.114,0.115,0.116,0.117,0.118,0.119,0.12,0.121,0.122,0.123,0.124,0.125,0.126,0.127,0.128,0.129,0.13,0.131,0.132,0.133,0.134,0.135,0.136,0.137,0.138,0.139,0.14,0.141,0.142,0.143,0.144,0.145,0.146,0.147,0.148,0.149,0.15,0.151,0.152,0.153,0.154,0.155,0.156,0.157,0.158,0.159,0.16,0.161,0.162,0.163,0.164,0.165,0.166,0.167,0.168,0.169,0.17,0.171,0.172,0.173,0.174,0.175,0.176,0.177,0.178,0.179,0.18,0.181,0.182,0.183,0.184,0.185,0.186,0.187,0.188,0.189,0.19,0.191,0.192,0.193,0.194,0.195,0.196,0.197,0.198,0.199,0.2,0.201,0.202,0.203,0.204,0.205,0.206,0.207,0.208,0.209,0.21,0.211,0.212,0.213,0.214,0.215,0.216,0.217,0.218,0.219,0.22,0.221,0.222,0.223,0.224,0.225,0.226,0.227,0.228,0.229,0.23,0.231,0.232,0.233,0.234,0.235,0.236,0.237,0.238,0.239,0.24,0.241,0.242,0.243,0.244,0.245,0.246,0.247,0.248,0.249,0.25,0.251,0.252,0.253,0.254,0.255,0.256,0.257,0.258,0.259,0.26,0.261,0.262,0.263,0.264,0.265,0.266,0.267,0.268,0.269,0.27,0.271,0.272,0.273,0.274,0.275,0.276,0.277,0.278,0.279,0.28,0.281,0.282,0.283,0.284,0.285,0.286,0.287,0.288,0.289,0.29,0.291,0.292,0.293,0.294,0.295,0.296,0.297,0.298,0.299,0.3,0.301,0.302,0.303,0.304,0.305,0.306,0.307,0.308,0.309,0.31,0.311,0.312,0.313,0.314,0.315,0.316,0.317,0.318,0.319,0.32,0.321,0.322,0.323,0.324,0.325,0.326,0.327,0.328,0.329,0.33,0.331,0.332,0.333,0.334,0.335,0.336,0.337,0.338,0.339,0.34,0.341,0.342,0.343,0.344,0.345,0.346,0.347,0.348,0.349,0.35,0.351,0.352,0.353,0.354,0.355,0.356,0.357,0.358,0.359,0.36,0.361,0.362,0.363,0.364,0.365,0.366,0.367,0.368,0.369,0.37,0.371,0.372,0.373,0.374,0.375,0.376,0.377,0.378,0.379,0.38,0.381,0.382,0.383,0.384,0.385,0.386,0.387,0.388,0.389,0.39,0.391,0.392,0.393,0.394,0.395,0.396,0.397,0.398,0.399,0.4,0.401,0.402,0.403,0.404,0.405,0.406,0.407,0.408,0.409,0.41,0.411,0.412,0.413,0.414,0.415,0.416,0.417,0.418,0.419,0.42,0.421,0.422,0.423,0.424,0.425,0.426,0.427,0.428,0.429,0.43,0.431,0.432,0.433,0.434,0.435,0.436,0.437,0.438,0.439,0.44,0.441,0.442,0.443,0.444,0.445,0.446,0.447,0.448,0.449,0.45,0.451,0.452,0.453,0.454,0.455,0.456,0.457,0.458,0.459,0.46,0.461,0.462,0.463,0.464,0.465,0.466,0.467,0.468,0.469,0.47,0.471,0.472,0.473,0.474,0.475,0.476,0.477,0.478,0.479,0.48,0.481,0.482,0.483,0.484,0.485,0.486,0.487,0.488,0.489,0.49,0.491,0.492,0.493,0.494,0.495,0.496,0.497,0.498,0.499,0.5,0.501,0.502,0.503,0.504,0.505,0.506,0.507,0.508,0.509,0.51,0.511,0.512,0.513,0.514,0.515,0.516,0.517,0.518,0.519,0.52,0.521,0.522,0.523,0.524,0.525,0.526,0.527,0.528,0.529,0.53,0.531,0.532,0.533,0.534,0.535,0.536,0.537,0.538,0.539,0.54,0.541,0.542,0.543,0.544,0.545,0.546,0.547,0.548,0.549,0.55,0.551,0.552,0.553,0.554,0.555,0.556,0.557,0.558,0.559,0.56,0.561,0.562,0.563,0.564,0.565,0.566,0.567,0.568,0.569,0.57,0.571,0.572,0.573,0.574,0.575,0.576,0.577,0.578,0.579,0.58,0.581,0.582,0.583,0.584,0.585,0.586,0.587,0.588,0.589,0.59,0.591,0.592,0.593,0.594,0.595,0.596,0.597,0.598,0.599,0.6,0.601,0.602,0.603,0.604,0.605,0.606,0.607,0.608,0.609,0.61,0.611,0.612,0.613,0.614,0.615,0.616,0.617,0.618,0.619,0.62,0.621,0.622,0.623,0.624,0.625,0.626,0.627,0.628,0.629,0.63,0.631,0.632,0.633,0.634,0.635,0.636,0.637,0.638,0.639,0.64,0.641,0.642,0.643,0.644,0.645,0.646,0.647,0.648,0.649,0.65,0.651,0.652,0.653,0.654,0.655,0.656,0.657,0.658,0.659,0.66,0.661,0.662,0.663,0.664,0.665,0.666,0.667,0.668,0.669,0.67,0.671,0.672,0.673,0.674,0.675,0.676,0.677,0.678,0.679,0.68,0.681,0.682,0.683,0.684,0.685,0.686,0.687,0.688,0.689,0.69,0.691,0.692,0.693,0.694,0.695,0.696,0.697,0.698,0.699,0.7,0.701,0.702,0.703,0.704,0.705,0.706,0.707,0.708,0.709,0.71,0.711,0.712,0.713,0.714,0.715,0.716,0.717,0.718,0.719,0.72,0.721,0.722,0.723,0.724,0.725,0.726,0.727,0.728,0.729,0.73,0.731,0.732,0.733,0.734,0.735,0.736,0.737,0.738,0.739,0.74,0.741,0.742,0.743,0.744,0.745,0.746,0.747,0.748,0.749,0.75,0.751,0.752,0.753,0.754,0.755,0.756,0.757,0.758,0.759,0.76,0.761,0.762,0.763,0.764,0.765,0.766,0.767,0.768,0.769,0.77,0.771,0.772,0.773,0.774,0.775,0.776,0.777,0.778,0.779,0.78,0.781,0.782,0.783,0.784,0.785,0.786,0.787,0.788,0.789,0.79,0.791,0.792,0.793,0.794,0.795,0.796,0.797,0.798,0.799,0.8,0.801,0.802,0.803,0.804,0.805,0.806,0.807,0.808,0.809,0.81,0.811,0.812,0.813,0.814,0.815,0.816,0.817,0.818,0.819,0.82,0.821,0.822,0.823,0.824,0.825,0.826,0.827,0.828,0.829,0.83,0.831,0.832,0.833,0.834,0.835,0.836,0.837,0.838,0.839,0.84,0.841,0.842,0.843,0.844,0.845,0.846,0.847,0.848,0.849,0.85,0.851,0.852,0.853,0.854,0.855,0.856,0.857,0.858,0.859,0.86,0.861,0.862,0.863,0.864,0.865,0.866,0.867,0.868,0.869,0.87,0.871,0.872,0.873,0.874,0.875,0.876,0.877,0.878,0.879,0.88,0.881,0.882,0.883,0.884,0.885,0.886,0.887,0.888,0.889,0.89,0.891,0.892,0.893,0.894,0.895,0.896,0.897,0.898,0.899,0.9,0.901,0.902,0.903,0.904,0.905,0.906,0.907,0.908,0.909,0.91,0.911,0.912,0.913,0.914,0.915,0.916,0.917,0.918,0.919,0.92,0.921,0.922,0.923,0.924,0.925,0.926,0.927,0.928,0.929,0.93,0.931,0.932,0.933,0.934,0.935,0.936,0.937,0.938,0.939,0.94,0.941,0.942,0.943,0.944,0.945,0.946,0.947,0.948,0.949,0.95,0.951,0.952,0.953,0.954,0.955,0.956,0.957,0.958,0.959,0.96,0.961,0.962,0.963,0.964,0.965,0.966,0.967,0.968,0.969,0.97,0.971,0.972,0.973,0.974,0.975,0.976,0.977,0.978,0.979,0.98,0.981,0.982,0.983,0.984,0.985,0.986,0.987,0.988,0.989,0.99,0.991,0.992,0.993,0.994,0.995,0.996,0.997,0.998,0.999};
            linspace(begin, end, size);
    x = {x.begin() + 1, x.end() - 1};
    size = x.size();

    std::vector<std::vector<ldouble>> matrix(size + 1, std::vector<ldouble>(size+1));
    std::vector<ldouble> u0(size) //= {0.0001,0.0001998,0.000299399,0.000398799,0.000497998,0.000596997,0.000695796,0.000794394,0.000892793,0.000990991,0.00108899,0.00118679,0.00128438,0.00138178,0.00147898,0.00157598,0.00167277,0.00176937,0.00186577,0.00196196,0.00205796,0.00215375,0.00224935,0.00234474,0.00243994,0.00253493,0.00262973,0.00272432,0.00281872,0.00291291,0.00300691,0.0031007,0.00319429,0.00328769,0.00338088,0.00347387,0.00356667,0.00365926,0.00375165,0.00384384,0.00393584,0.00402763,0.00411922,0.00421061,0.0043018,0.00439279,0.00448358,0.00457417,0.00466456,0.00475475,0.00484474,0.00493453,0.00502412,0.00511351,0.0052027,0.00529169,0.00538048,0.00546907,0.00555746,0.00564565,0.00573363,0.00582142,0.00590901,0.0059964,0.00608358,0.00617057,0.00625736,0.00634394,0.00643033,0.00651652,0.0066025,0.00668829,0.00677387,0.00685926,0.00694444,0.00702943,0.00711421,0.0071988,0.00728318,0.00736737,0.00745135,0.00753513,0.00761872,0.0077021,0.00778529,0.00786827,0.00795105,0.00803363,0.00811602,0.0081982,0.00828018,0.00836196,0.00844354,0.00852492,0.00860611,0.00868709,0.00876787,0.00884845,0.00892883,0.00900901,0.00908899,0.00916877,0.00924835,0.00932773,0.00940691,0.00948589,0.00956466,0.00964324,0.00972162,0.0097998,0.00987778,0.00995556,0.0100331,0.0101105,0.0101877,0.0102647,0.0103414,0.010418,0.0104944,0.0105706,0.0106465,0.0107223,0.0107979,0.0108733,0.0109484,0.0110234,0.0110982,0.0111728,0.0112471,0.0113213,0.0113953,0.0114691,0.0115426,0.011616,0.0116892,0.0117622,0.0118349,0.0119075,0.0119799,0.0120521,0.012124,0.0121958,0.0122674,0.0123387,0.0124099,0.0124809,0.0125517,0.0126222,0.0126926,0.0127628,0.0128327,0.0129025,0.0129721,0.0130414,0.0131106,0.0131796,0.0132483,0.0133169,0.0133853,0.0134535,0.0135214,0.0135892,0.0136568,0.0137241,0.0137913,0.0138583,0.013925,0.0139916,0.014058,0.0141241,0.0141901,0.0142559,0.0143214,0.0143868,0.014452,0.0145169,0.0145817,0.0146462,0.0147106,0.0147748,0.0148387,0.0149025,0.0149661,0.0150294,0.0150926,0.0151556,0.0152183,0.0152809,0.0153432,0.0154054,0.0154674,0.0155291,0.0155907,0.0156521,0.0157132,0.0157742,0.0158349,0.0158955,0.0159559,0.016016,0.016076,0.0161357,0.0161953,0.0162547,0.0163138,0.0163728,0.0164315,0.0164901,0.0165484,0.0166066,0.0166646,0.0167223,0.0167799,0.0168372,0.0168944,0.0169514,0.0170081,0.0170647,0.017121,0.0171772,0.0172331,0.0172889,0.0173444,0.0173998,0.017455,0.0175099,0.0175647,0.0176192,0.0176736,0.0177277,0.0177817,0.0178354,0.017889,0.0179423,0.0179955,0.0180484,0.0181012,0.0181538,0.0182061,0.0182583,0.0183102,0.018362,0.0184135,0.0184649,0.018516,0.018567,0.0186177,0.0186683,0.0187186,0.0187688,0.0188187,0.0188685,0.018918,0.0189674,0.0190165,0.0190655,0.0191142,0.0191628,0.0192111,0.0192593,0.0193072,0.019355,0.0194025,0.0194498,0.019497,0.0195439,0.0195907,0.0196372,0.0196836,0.0197297,0.0197757,0.0198214,0.019867,0.0199123,0.0199575,0.0200024,0.0200471,0.0200917,0.020136,0.0201802,0.0202241,0.0202679,0.0203114,0.0203548,0.0203979,0.0204408,0.0204836,0.0205261,0.0205685,0.0206106,0.0206526,0.0206943,0.0207358,0.0207772,0.0208183,0.0208593,0.0209,0.0209405,0.0209809,0.021021,0.021061,0.0211007,0.0211402,0.0211796,0.0212187,0.0212577,0.0212964,0.0213349,0.0213733,0.0214114,0.0214493,0.0214871,0.0215246,0.021562,0.0215991,0.021636,0.0216728,0.0217093,0.0217456,0.0217818,0.0218177,0.0218535,0.021889,0.0219243,0.0219595,0.0219944,0.0220291,0.0220637,0.022098,0.0221321,0.0221661,0.0221998,0.0222333,0.0222667,0.0222998,0.0223327,0.0223655,0.022398,0.0224303,0.0224625,0.0224944,0.0225261,0.0225577,0.022589,0.0226201,0.022651,0.0226818,0.0227123,0.0227426,0.0227728,0.0228027,0.0228324,0.022862,0.0228913,0.0229204,0.0229493,0.0229781,0.0230066,0.0230349,0.0230631,0.023091,0.0231187,0.0231462,0.0231736,0.0232007,0.0232276,0.0232544,0.0232809,0.0233072,0.0233333,0.0233593,0.023385,0.0234105,0.0234358,0.023461,0.0234859,0.0235106,0.0235351,0.0235595,0.0235836,0.0236075,0.0236312,0.0236548,0.0236781,0.0237012,0.0237241,0.0237468,0.0237694,0.0237917,0.0238138,0.0238357,0.0238575,0.023879,0.0239003,0.0239214,0.0239423,0.0239631,0.0239836,0.0240039,0.024024,0.0240439,0.0240637,0.0240832,0.0241025,0.0241216,0.0241405,0.0241593,0.0241778,0.0241961,0.0242142,0.0242321,0.0242498,0.0242674,0.0242847,0.0243018,0.0243187,0.0243354,0.0243519,0.0243683,0.0243844,0.0244003,0.024416,0.0244315,0.0244468,0.024462,0.0244769,0.0244916,0.0245061,0.0245204,0.0245345,0.0245484,0.0245622,0.0245757,0.024589,0.0246021,0.024615,0.0246277,0.0246402,0.0246526,0.0246647,0.0246766,0.0246883,0.0246998,0.0247111,0.0247222,0.0247331,0.0247438,0.0247544,0.0247647,0.0247748,0.0247847,0.0247944,0.0248039,0.0248132,0.0248223,0.0248312,0.0248399,0.0248484,0.0248568,0.0248649,0.0248728,0.0248805,0.024888,0.0248953,0.0249024,0.0249093,0.024916,0.0249225,0.0249288,0.0249349,0.0249408,0.0249465,0.024952,0.0249574,0.0249625,0.0249674,0.0249721,0.0249766,0.0249809,0.024985,0.0249889,0.0249926,0.0249961,0.0249994,0.0250025,0.0250054,0.0250081,0.0250106,0.0250129,0.025015,0.0250169,0.0250186,0.0250201,0.0250214,0.0250225,0.0250234,0.0250241,0.0250246,0.0250249,0.025025,0.0250249,0.0250246,0.0250241,0.0250234,0.0250225,0.0250214,0.0250201,0.0250186,0.0250169,0.025015,0.0250129,0.0250106,0.0250081,0.0250054,0.0250025,0.0249994,0.0249961,0.0249926,0.0249889,0.024985,0.0249809,0.0249766,0.0249721,0.0249674,0.0249625,0.0249574,0.024952,0.0249465,0.0249408,0.0249349,0.0249288,0.0249225,0.024916,0.0249093,0.0249024,0.0248953,0.024888,0.0248805,0.0248728,0.0248649,0.0248568,0.0248484,0.0248399,0.0248312,0.0248223,0.0248132,0.0248039,0.0247944,0.0247847,0.0247748,0.0247647,0.0247544,0.0247438,0.0247331,0.0247222,0.0247111,0.0246998,0.0246883,0.0246766,0.0246647,0.0246526,0.0246402,0.0246277,0.024615,0.0246021,0.024589,0.0245757,0.0245622,0.0245484,0.0245345,0.0245204,0.0245061,0.0244916,0.0244769,0.024462,0.0244468,0.0244315,0.024416,0.0244003,0.0243844,0.0243683,0.0243519,0.0243354,0.0243187,0.0243018,0.0242847,0.0242674,0.0242498,0.0242321,0.0242142,0.0241961,0.0241778,0.0241593,0.0241405,0.0241216,0.0241025,0.0240832,0.0240637,0.0240439,0.024024,0.0240039,0.0239836,0.0239631,0.0239423,0.0239214,0.0239003,0.023879,0.0238575,0.0238357,0.0238138,0.0237917,0.0237694,0.0237468,0.0237241,0.0237012,0.0236781,0.0236548,0.0236312,0.0236075,0.0235836,0.0235595,0.0235351,0.0235106,0.0234859,0.023461,0.0234358,0.0234105,0.023385,0.0233593,0.0233333,0.0233072,0.0232809,0.0232544,0.0232276,0.0232007,0.0231736,0.0231462,0.0231187,0.023091,0.0230631,0.0230349,0.0230066,0.0229781,0.0229493,0.0229204,0.0228913,0.022862,0.0228324,0.0228027,0.0227728,0.0227426,0.0227123,0.0226818,0.022651,0.0226201,0.022589,0.0225577,0.0225261,0.0224944,0.0224625,0.0224303,0.022398,0.0223655,0.0223327,0.0222998,0.0222667,0.0222333,0.0221998,0.0221661,0.0221321,0.022098,0.0220637,0.0220291,0.0219944,0.0219595,0.0219243,0.021889,0.0218535,0.0218177,0.0217818,0.0217456,0.0217093,0.0216728,0.021636,0.0215991,0.021562,0.0215246,0.0214871,0.0214493,0.0214114,0.0213733,0.0213349,0.0212964,0.0212577,0.0212187,0.0211796,0.0211402,0.0211007,0.021061,0.021021,0.0209809,0.0209405,0.0209,0.0208593,0.0208183,0.0207772,0.0207358,0.0206943,0.0206526,0.0206106,0.0205685,0.0205261,0.0204836,0.0204408,0.0203979,0.0203548,0.0203114,0.0202679,0.0202241,0.0201802,0.020136,0.0200917,0.0200471,0.0200024,0.0199575,0.0199123,0.019867,0.0198214,0.0197757,0.0197297,0.0196836,0.0196372,0.0195907,0.0195439,0.019497,0.0194498,0.0194025,0.019355,0.0193072,0.0192593,0.0192111,0.0191628,0.0191142,0.0190655,0.0190165,0.0189674,0.018918,0.0188685,0.0188187,0.0187688,0.0187186,0.0186683,0.0186177,0.018567,0.018516,0.0184649,0.0184135,0.018362,0.0183102,0.0182583,0.0182061,0.0181538,0.0181012,0.0180484,0.0179955,0.0179423,0.017889,0.0178354,0.0177817,0.0177277,0.0176736,0.0176192,0.0175647,0.0175099,0.017455,0.0173998,0.0173444,0.0172889,0.0172331,0.0171772,0.017121,0.0170647,0.0170081,0.0169514,0.0168944,0.0168372,0.0167799,0.0167223,0.0166646,0.0166066,0.0165484,0.0164901,0.0164315,0.0163728,0.0163138,0.0162547,0.0161953,0.0161357,0.016076,0.016016,0.0159559,0.0158955,0.0158349,0.0157742,0.0157132,0.0156521,0.0155907,0.0155291,0.0154674,0.0154054,0.0153432,0.0152809,0.0152183,0.0151556,0.0150926,0.0150294,0.0149661,0.0149025,0.0148387,0.0147748,0.0147106,0.0146462,0.0145817,0.0145169,0.014452,0.0143868,0.0143214,0.0142559,0.0141901,0.0141241,0.014058,0.0139916,0.013925,0.0138583,0.0137913,0.0137241,0.0136568,0.0135892,0.0135214,0.0134535,0.0133853,0.0133169,0.0132483,0.0131796,0.0131106,0.0130414,0.0129721,0.0129025,0.0128327,0.0127628,0.0126926,0.0126222,0.0125517,0.0124809,0.0124099,0.0123387,0.0122674,0.0121958,0.012124,0.0120521,0.0119799,0.0119075,0.0118349,0.0117622,0.0116892,0.011616,0.0115426,0.0114691,0.0113953,0.0113213,0.0112471,0.0111728,0.0110982,0.0110234,0.0109484,0.0108733,0.0107979,0.0107223,0.0106465,0.0105706,0.0104944,0.010418,0.0103414,0.0102647,0.0101877,0.0101105,0.0100331,0.00995556,0.00987778,0.0097998,0.00972162,0.00964324,0.00956466,0.00948589,0.00940691,0.00932773,0.00924835,0.00916877,0.00908899,0.00900901,0.00892883,0.00884845,0.00876787,0.00868709,0.00860611,0.00852492,0.00844354,0.00836196,0.00828018,0.0081982,0.00811602,0.00803363,0.00795105,0.00786827,0.00778529,0.0077021,0.00761872,0.00753513,0.00745135,0.00736737,0.00728318,0.0071988,0.00711421,0.00702943,0.00694444,0.00685926,0.00677387,0.00668829,0.0066025,0.00651652,0.00643033,0.00634394,0.00625736,0.00617057,0.00608358,0.0059964,0.00590901,0.00582142,0.00573363,0.00564565,0.00555746,0.00546907,0.00538048,0.00529169,0.0052027,0.00511351,0.00502412,0.00493453,0.00484474,0.00475475,0.00466456,0.00457417,0.00448358,0.00439279,0.0043018,0.00421061,0.00411922,0.00402763,0.00393584,0.00384384,0.00375165,0.00365926,0.00356667,0.00347387,0.00338088,0.00328769,0.00319429,0.0031007,0.00300691,0.00291291,0.00281872,0.00272432,0.00262973,0.00253493,0.00243994,0.00234474,0.00224935,0.00215375,0.00205796,0.00196196,0.00186577,0.00176937,0.00167277,0.00157598,0.00147898,0.00138178,0.00128438,0.00118679,0.00108899,0.000990991,0.000892793,0.000794394,0.000695796,0.000596997,0.000497998,0.000398799,0.000299399,0.0001998,0.0001},
    ,u(size) ,b(matrix.size());

    // Fill Data
    for(size_t i = 0 ; i < size; ++i){
        u0[i] = u0_function(x[i]);
    }
    str_dstrb::FillSLAE(matrix, b, x, u0, alpha, P, T0, begin ,end);

    // Solve Task
    SolveGauss(matrix, b);
    auto solution = b;

    auto p = std::vector<ldouble>{solution.begin(), solution.end() - 1};
    //std::cout << "sum P = " << std::accumulate(p.begin(), p.end(), 0.0) << std::endl;

    // Calculate U
    for (size_t i = 0; i < u.size(); ++i) {
        u[i] = str_dstrb::СalculateDeviationFromEquilibrium(x[i], {x, p}, T0, begin, end);
    }
    ldouble loss = std::abs(str_dstrb::CalculateLoss(x, u , u0));
    std::cout << "loss = " << loss << std::endl;
    //std::cout << "lambda = " << solution.back() << std::endl;

    x.push_back(end); x.insert(x.begin(), begin);
    u0.push_back(0); u0.insert(u0.begin(), 0);
    u.push_back(0); u.insert(u.begin(), 0);
    p.push_back(0); p.insert(p.begin(), 0);

    WriteLog(x, u0, "./string_example/x_u0"s);
    WriteLog(x, u, "./string_example/x_u"s);
    WriteLog(x, p, "./string_example/x_p");

    system("./string_example/string.plot"); // строю графики
    system("./string_example/open_string.bash"); // открываю графики

    std::cout << __FUNCTION__ << " is Done! \n" << std::endl;
}

void MembraneDistributionExample2(){
    const ldouble begin_x = 0, end_x = 1,
            begin_y = 0, end_y = 1,
            P = 22, alpha = 0.0001;
    ldouble eps = 1e-4;

    std::vector<ldouble> x = {0.0526316,0.105263,0.157895,0.210526,0.263158,0.315789,0.368421,0.421053,0.473684,0.526316,0.578947,0.631579,0.684211,0.736842,0.789474,0.842105,0.894737,0.947368};

    std::vector<ldouble> y = {0.0526316,0.105263,0.157895,0.210526,0.263158,0.315789,0.368421,0.421053,0.473684,0.526316,0.578947,0.631579,0.684211,0.736842,0.789474,0.842105,0.894737,0.947368};
     size_t size_x = x.size(), size_y = y.size();

    std::vector<std::vector<ldouble>> matrix(size_x*size_y+ 1, std::vector<ldouble>(size_x*size_y + 1, 0));
    std::vector<std::vector<ldouble>> u0 = {
                                            {0.000206906,0.000403079,0.000583059,0.00074306,0.000879741,0.000985922,0.00107075,0.00112569,0.00114852,0.00114852,0.00112569,0.00107075,0.000985922,0.000879741,0.00074306,0.000583059,0.000403079,0.000206906},
                                            {0.000404235,0.00078706,0.00113873,0.00145125,0.0017194,0.00192954,0.00209703,0.00220717,0.00226245,0.00226245,0.00220717,0.00209703,0.00192954,0.0017194,0.00145125,0.00113873,0.00078706,0.000404235          },
                                            {0.000584199,0.00113858,0.00165062,0.00210568,0.00249365,0.00280262,0.00304993,0.00321025,0.00329188,0.00329188,0.00321025,0.00304993,0.00280262,0.00249365,0.00210568,0.00165062,0.00113858,0.000584199        },
                                            {0.000742519,0.00145035,0.0021051,0.00268719,0.0031832,0.00358759,0.00389898,0.0041049,0.0042114,0.0042114,0.0041049,0.00389898,0.00358759,0.0031832,0.00268719,0.0021051,0.00145035,0.000742519                },
                                            {0.000879026,0.00171601,0.00249213,0.00318174,0.00377171,0.00425547,0.00462492,0.00487229,0.0049975,0.0049975,0.00487229,0.00462492,0.00425547,0.00377171,0.00318174,0.00249213,0.00171601,0.000879026          },
                                            {0.00098478,0.00192951,0.00280616,0.00358788,0.00425557,0.00480807,0.00522731,0.0055076,0.00564961,0.00564961,0.0055076,0.00522731,0.00480807,0.00425557,0.00358788,0.00280616,0.00192951,0.00098478            },
                                            {0.00106905,0.00209722,0.00305029,0.00389911,0.00462607,0.00522722,0.00568359,0.00598795,0.00614144,0.00614144,0.00598795,0.00568359,0.00522722,0.00462607,0.00389911,0.00305029,0.00209722,0.00106905          },
                                            {0.00112678,0.0022072,0.00321054,0.00410551,0.0048737,0.00550773,0.00598849,0.00631066,0.00647294,0.00647294,0.00631066,0.00598849,0.00550773,0.0048737,0.00410551,0.00321054,0.0022072,0.00112678              },
                                            {0.00115319,0.00226231,0.00329108,0.00420836,0.00499659,0.00564949,0.00614414,0.0064755,0.00664133,0.00664133,0.0064755,0.00614414,0.00564949,0.00499659,0.00420836,0.00329108,0.00226231,0.00115319            },
                                            {0.00115319,0.00226231,0.00329108,0.00420836,0.00499659,0.00564949,0.00614414,0.0064755,0.00664133,0.00664133,0.0064755,0.00614414,0.00564949,0.00499659,0.00420836,0.00329108,0.00226231,0.00115319            },
                                            {0.00112678,0.0022072,0.00321054,0.00410551,0.0048737,0.00550773,0.00598849,0.00631066,0.00647294,0.00647294,0.00631066,0.00598849,0.00550773,0.0048737,0.00410551,0.00321054,0.0022072,0.00112678              },
                                            {0.00106905,0.00209722,0.00305029,0.00389911,0.00462607,0.00522722,0.00568359,0.00598795,0.00614144,0.00614144,0.00598795,0.00568359,0.00522722,0.00462607,0.00389911,0.00305029,0.00209722,0.00106905          },
                                            {0.00098478,0.00192951,0.00280616,0.00358788,0.00425557,0.00480807,0.00522731,0.0055076,0.00564961,0.00564961,0.0055076,0.00522731,0.00480807,0.00425557,0.00358788,0.00280616,0.00192951,0.00098478            },
                                            {0.000879026,0.00171601,0.00249213,0.00318174,0.00377171,0.00425547,0.00462492,0.00487229,0.0049975,0.0049975,0.00487229,0.00462492,0.00425547,0.00377171,0.00318174,0.00249213,0.00171601,0.000879026          },
                                            {0.000742519,0.00145035,0.0021051,0.00268719,0.0031832,0.00358759,0.00389898,0.0041049,0.0042114,0.0042114,0.0041049,0.00389898,0.00358759,0.0031832,0.00268719,0.0021051,0.00145035,0.000742519                },
                                            {0.000584199,0.00113858,0.00165062,0.00210568,0.00249365,0.00280262,0.00304993,0.00321025,0.00329188,0.00329188,0.00321025,0.00304993,0.00280262,0.00249365,0.00210568,0.00165062,0.00113858,0.000584199        },
                                            {0.000404235,0.00078706,0.00113873,0.00145125,0.0017194,0.00192954,0.00209703,0.00220717,0.00226245,0.00226245,0.00220717,0.00209703,0.00192954,0.0017194,0.00145125,0.00113873,0.00078706,0.000404235          },
                                            {0.000206906,0.000403079,0.000583059,0.00074306,0.000879741,0.000985922,0.00107075,0.00112569,0.00114852,0.00114852,0.00112569,0.00107075,0.000985922,0.000879741,0.00074306,0.000583059,0.000403079,0.000206906},
                                            };
    std::vector<ldouble> b(matrix.size(), 0.0);


    std::cout << "init data" << std::endl;
    {
        LOG_DURATION("FILL_SLAE");
        size_t num_threads = 12;
        membrane_dstrb::FillSLAE(matrix, b, {x, y}, u0, alpha, P, size_x, size_y, eps, begin_x, end_x, begin_y, end_y, num_threads);
    }

    std::cout << "matrix is filled" << std::endl;
    WriteSLAE(matrix, b, "slae");

    {
        LOG_DURATION("SOLVE_SLAE");
        SolveGauss(matrix, b);
    }
    std::cout << "slae is solved" << std::endl;
    std::cout << "lambda = " << b.back() << std::endl;
    auto p = membrane_dstrb::FillP(b, size_x, size_y);

    auto u = membrane_dstrb::CalculateU({x, y, p}, eps, end_x, end_y);
    /*
    bool first = true;
    std::cout << "{";
    for(size_t i = 1 ; i < u.size() - 1; ++i){
        if(first){
            std::cout << "{" << std::vector<ldouble>{u[i].begin()+1, u[i].end() -1} << "}";
            first = false;
            continue;
        }
        std::cout << ",\n{" << std::vector<ldouble>{u[i].begin()+1, u[i].end() -1} << "}";
    }
    std::cout << "}\n";
    */
    x.push_back(end_x); x.insert(x.begin(), begin_x);
    y.push_back(end_y); y.insert(y.begin(), begin_y);
    u0 = membrane_dstrb::AddZerosBorders(u0);

    std::cout << "loss = " << std::abs(membrane_dstrb::CalculateLoss({x, y}, u , u0)) << std::endl;

    p = membrane_dstrb::AddZerosBorders(p);
    Write({x, y}, u0, "u0");
    std::cout << "u0 is writed" << std::endl;
    Write({x, y}, u, "u");
    std::cout << "u is writed" << std::endl;
    Write({x, y}, p, "p");
    std::cout << "p is writed" << std::endl;

    system("./membrane.plot"); // строю графики
    system("./open_membrane.bash"); // открываю графики

    std::cout << __FUNCTION__ << " is Done! \n" << std::endl;

}

void MembraneDistributionExample(){
    ldouble begin_x = 0, end_x = 2,
            begin_y = 0, end_y = 2,
            P = 22, alpha = 100; //P = 22
    //size_t M = 100, N = 100;
    ldouble eps = 1e-10;
    size_t size = 20;
    size_t size_x = /*std::ceil(end_x)**/size, size_y = /*std::ceil(end_y)**/size;

    auto x = linspace(begin_x, end_x, size_x);
    x = {x.begin() + 1, x.end() - 1};
    size_x = x.size();

    auto y = linspace(begin_y, end_y, size_y);
    y = {y.begin() + 1, y.end() - 1};
    size_y = y.size();

    std::vector<std::vector<ldouble>> matrix(size_x*size_y+ 1, std::vector<ldouble>(size_x*size_y + 1, 0));
    std::vector<std::vector<ldouble>> u0(size_y, std::vector<ldouble>(size_x));
    std::vector<ldouble> b(matrix.size(), 0.0);

    auto u0_function = [end_x, end_y](ldouble x, ldouble y){ return (x*(end_x-x))*y*(end_y-y)/10.0;};
    for(size_t i = 0 ; i < size_y; ++i){
        for(size_t j = 0; j < size_x; ++j){
            u0[i][j] = u0_function(x[j], y[i]);
        }
    }

    std::cout << "init data" << std::endl;
    {
        LOG_DURATION("FILL_SLAE");
        size_t num_threads = 12;
        //membrane_dstrb::FillSLAE(matrix, b, {x, y}, u0, alpha, P, size_x, size_y, M, N, begin_x, end_x, begin_y, end_y, num_threads);
        membrane_dstrb::FillSLAE(matrix, b, {x, y}, u0, alpha, P, size_x, size_y, eps, begin_x, end_x, begin_y, end_y, num_threads);
    }

    std::cout << "matrix is filled" << std::endl;
    //Write(matrix, "matrix");
    //Write(b, "b");
    WriteSLAE(matrix, b, "slae");

    {
        LOG_DURATION("SOLVE_SLAE");
        SolveGauss(matrix, b);
    }
    std::cout << "slae is solved" << std::endl;
    std::cout << "sum P = " << std::accumulate(b.begin(), b.end()-1, 0.0) << std::endl;

    auto p = membrane_dstrb::FillP(b, size_x, size_y);


    //auto u = membrane_dstrb::CalculateU({x, y, p}, M, N, end_x, end_y);
    auto u = membrane_dstrb::CalculateU({x, y, p}, eps, end_x, end_y);
    x.push_back(end_x); x.insert(x.begin(), begin_x);
    y.push_back(end_y); y.insert(y.begin(), begin_y);
    u0 = membrane_dstrb::AddZerosBorders(u0);

    std::cout << "lambda = " << b.back() << std::endl;
    std::cout << "loss = " << std::abs(membrane_dstrb::CalculateLoss({x, y}, u , u0)) << std::endl;

    p = membrane_dstrb::AddZerosBorders(p);
    Write({x, y}, u0, "u0");
    std::cout << "u0 is writed" << std::endl;
    Write({x, y}, u, "u");
    std::cout << "u is writed" << std::endl;
    Write({x, y}, p, "p");
    std::cout << "p is writed" << std::endl;

    system("./membrane.plot"); // строю графики
    system("./open_membrane.bash"); // открываю графики

    std::cout << __FUNCTION__ << " is Done! \n" << std::endl;
}

void MembraneDistributionCheckPoint(){
    ldouble begin_x = 0, end_x = 2,
            begin_y = 0, end_y = 2,
            P = 22, alpha = 100000; //P = 22
    //size_t M = 100, N = 100;
    ldouble eps = 1e-10;
    size_t size_max = 30;
    size_t size_min = 5;

    std::vector<ldouble> check_points;
    check_points.reserve(size_max - size_min + 1);
    for (size_t size = size_min; size <= size_max; ++size) {
        size_t size_x = /*std::ceil(end_x)**/size, size_y = /*std::ceil(end_y)**/size;

        auto x = linspace(begin_x, end_x, size_x);
        x = {x.begin() + 1, x.end() - 1};

        auto it_x = std::upper_bound(x.begin(), x.end(), 1.0);
        x.insert(it_x, 1);
        size_x = x.size();
        size_t pos_point_x =  std::distance(x.begin() ,std::lower_bound(x.begin(), x.end(), 1.0));

        auto y = linspace(begin_y, end_y, size_y);
        y = {y.begin() + 1, y.end() - 1};

        auto it_y = std::upper_bound(y.begin(), y.end(), 1.0);
        y.insert(it_y, 1);
        size_y = y.size();
        size_t pos_point_y = std::distance(y.begin() ,std::lower_bound(y.begin(), y.end(), 1.0));

        std::vector<std::vector<ldouble>> matrix(size_x*size_y+ 1, std::vector<ldouble>(size_x*size_y + 1, 0));
        std::vector<std::vector<ldouble>> u0(size_y, std::vector<ldouble>(size_x));
        std::vector<ldouble> b(matrix.size(), 0.0);

        auto u0_function = [end_x, end_y](ldouble x, ldouble y){ return (x*(end_x-x))*y*(end_y-y)/10.0;};
        for(size_t i = 0 ; i < size_y; ++i){
            for(size_t j = 0; j < size_x; ++j){
                u0[i][j] = u0_function(x[j], y[i]);
            }
        }

        {
            LOG_DURATION("FILL_SLAE" + std::to_string(size));
            size_t num_threads = 12;
            //membrane_dstrb::FillSLAE(matrix, b, {x, y}, u0, alpha, P, size_x, size_y, M, N, begin_x, end_x, begin_y, end_y, num_threads);
            membrane_dstrb::FillSLAE(matrix, b, {x, y}, u0, alpha, P, size_x, size_y, eps, begin_x, end_x, begin_y, end_y, num_threads);
        }

        {
            LOG_DURATION("SOLVE_SLAE" + std::to_string(size));
            SolveGauss(matrix, b);
        }
        auto p = membrane_dstrb::FillP(b, size_x, size_y);
        //auto u = membrane_dstrb::CalculateU({x, y, p}, M, N, end_x, end_y);
        //auto u = membrane_dstrb::CalculateU({x, y, p}, eps, end_x, end_y);
        check_points.push_back(p[pos_point_y][pos_point_x]);
    }
    std::cout << "check_points = \n";
    for (size_t i = 0; i < check_points.size(); ++i) {
        std::cout << "size " << size_min + i << ": " << check_points[i] << '\n';
    }
    std::cout << __FUNCTION__ << " is Done! \n" << std::endl;
}

// Добавил точку [1.0;1.0] в мембрану [0;2]x[0;2]
/*
FILL_SLAE5: 1 ms
SOLVE_SLAE5: 0 ms
FILL_SLAE6: 19 ms
SOLVE_SLAE6: 0 ms
FILL_SLAE7: 4 ms
SOLVE_SLAE7: 0 ms
FILL_SLAE8: 25 ms
SOLVE_SLAE8: 2 ms
FILL_SLAE9: 26 ms
SOLVE_SLAE9: 4 ms
FILL_SLAE10: 47 ms
SOLVE_SLAE10: 6 ms
FILL_SLAE11: 54 ms
SOLVE_SLAE11: 9 ms
FILL_SLAE12: 207 ms
SOLVE_SLAE12: 14 ms
FILL_SLAE13: 71 ms
SOLVE_SLAE13: 24 ms
FILL_SLAE14: 773 ms
SOLVE_SLAE14: 40 ms
FILL_SLAE15: 462 ms
SOLVE_SLAE15: 77 ms
FILL_SLAE16: 449 ms
SOLVE_SLAE16: 88 ms
FILL_SLAE17: 585 ms
SOLVE_SLAE17: 90 ms
FILL_SLAE18: 2416 ms
SOLVE_SLAE18: 126 ms
FILL_SLAE19: 749 ms
SOLVE_SLAE19: 173 ms
FILL_SLAE20: 4480 ms
SOLVE_SLAE20: 244 ms
FILL_SLAE21: 1166 ms
SOLVE_SLAE21: 311 ms
FILL_SLAE22: 2633 ms
SOLVE_SLAE22: 412 ms
FILL_SLAE23: 3593 ms
SOLVE_SLAE23: 538 ms
FILL_SLAE24: 12011 ms
SOLVE_SLAE24: 693 ms
FILL_SLAE25: 2420 ms
SOLVE_SLAE25: 893 ms
FILL_SLAE26: 13732 ms
SOLVE_SLAE26: 1140 ms
FILL_SLAE27: 10454 ms
SOLVE_SLAE27: 1432 ms
FILL_SLAE28: 14068 ms
SOLVE_SLAE28: 1777 ms
FILL_SLAE29: 9693 ms
SOLVE_SLAE29: 2183 ms
FILL_SLAE30: 46901 ms
SOLVE_SLAE30: 2729 ms
*/
// к каждому size сделать -2 (убрали крайние точки) + 1 (добавили [1.0;1.0])
//check_points =
//size 5: 5.49931
//size 6: 5.49922
//size 7: 5.49918
//size 8: 5.49915
//size 9: 5.49914
//size 10: 5.49913
//size 11: 5.49913
//size 12: 5.49912
//size 13: 5.49912
//size 14: 5.49912
//size 15: 5.49912
//size 16: 5.49912
//size 17: 5.49912
//size 18: 5.49912
//size 19: 5.49913
//size 20: 5.49913
//size 21: 5.49913
//size 22: 5.49913
//size 23: 5.49913
//size 24: 5.49913
//size 25: 5.49913
//size 26: 5.49913
//size 27: 5.49913
//size 28: 5.49913
//size 29: 5.49913
//size 30: 5.49913

int main(){

#ifndef NDEBUG
    {
        LOG_DURATION("Tests: ");
        tests::Test();
    }
#endif
    const  ldouble  begin = 0, end = 1, T0 = 5, P = 1, alpha = 0.1;
    size_t size = 101;
    auto u0_function = [end](ldouble x){ return (x*(end-x))/10.0;};
    //int omega = 10; // частота
    //auto u0_function = [end, omega](ldouble x){ return x*(1-x)*(std::sin(x * omega * M_PI) + 2)/M_PI ;};

    {
        //StringDistributionExample(u0_function, size,begin, end, T0, P, alpha);
    }

    {
        ldouble alpha_end = 0.01;
        size_t alpha_size = 1000;
        std::vector<ldouble> x = linspace(begin, end, size);
        x = {x.begin() + 1, x.end() - 1};
        size = x.size();
        std::vector<ldouble> u0(size);
        // Fill Data
        for(size_t i = 0 ; i < size; ++i){
            u0[i] = u0_function(x[i]);
        }
        auto experiment=  MakeExperimental(size, x, u0, T0, alpha_size, alpha_end, P, begin, end);

//        for(size_t i = 0 ; i < experiment.size(); ++i){
//            std::cout << "alpha = " << experiment[i].alpha << " " << " loss = " << experiment[i].loss << " mse = " << experiment[i].difference << '\n';
//        }

        auto [min, max] = std::minmax_element(experiment.begin() + 1, experiment.end(), [] (QualityIndicators s1, QualityIndicators s2){
                            return s1.loss + s1.difference < s2.loss + s2.difference;
                        });
        std::cout << "min: " << "i = " << std::distance(experiment.begin(), min) << " alpha = " << min->alpha << " " << " loss = "
            << min->loss << " mae = " << min->difference << '\n';
        std::cout << "max: " << "i = " << std::distance(experiment.begin(), max) << " alpha = " << max->alpha << " " << " loss = "
            << max->loss << " mae = " << max->difference << '\n';
    }

    //MembraneDistributionExample();
    //MembraneDistributionExample2();
    //MembraneDistributionCheckPoint();
}

